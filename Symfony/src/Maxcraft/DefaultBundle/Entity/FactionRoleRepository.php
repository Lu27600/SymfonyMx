<?php

namespace Maxcraft\DefaultBundle\Entity;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

/**
 * FactionRoleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FactionRoleRepository extends EntityRepository {

    public function findAllies($faction)
    {
        $statelist = new ArrayCollection();
        $states = $this->getEntityManager()->getRepository('MaxcraftDefaultBundle:FactionRole')->findBy(
          array('faction' => $faction,
              'hasRole'=>'FRIEND'),
          null,
          null,
          0
        );
        foreach($states as $st){
            $statelist->add($st);
        }

        $states = $this->getEntityManager()->getRepository('MaxcraftDefaultBundle:FactionRole')->findBy(
            array('toThisFaction' => $faction,
                'hasRole'=>'FRIEND'),
            null,
            null,
            0
        );

        foreach($states as $st1){
            $statelist->add($st1);
        }


        $factions = array();
        foreach($statelist as $state)
        {
            if($state->getFaction() == $faction)
            {
                $factions[] = $state->getToThisFaction();
            }
            elseif($state->getToThisFaction() == $faction)
            {
                $factions[] = $state->getFaction();
            }
        }

        return $factions;
    }

    public function findEnemies(Faction $faction)
    {
        $statelist = new ArrayCollection();
        $states = $this->getEntityManager()->getRepository('MaxcraftDefaultBundle:FactionRole')->findBy(
            array('faction' => $faction,
                'hasRole'=>'ENEMY'),
            null,
            null,
            0
        );
        foreach($states as $st){
            $statelist->add($st);
        }
        $states = $this->getEntityManager()->getRepository('MaxcraftDefaultBundle:FactionRole')->findBy(
            array('toThisFaction' => $faction,
                'hasRole'=>'ENEMY'),
            null,
            null,
            0
        );

        foreach($states as $st1){
            $statelist->add($st1);
        }

        $factions = array();
        foreach($statelist as $state)
        {
            if($state->getFaction() == $faction)
            {
                $factions[] = $state->getToThisFaction();
            }
            elseif($state->getToThisFaction() == $faction)
            {
                $factions[] = $state->getFaction();
            }
        }

        return $factions;
    }

    public function findStateObject(Faction $faction1, Faction $faction2)
    {

        $state = $this->getEntityManager()
            ->createQuery('SELECT f FROM MaxcraftDefaultBundle:FactionRole f WHERE
    			(f.faction1 = '.$faction1->getId().' AND f.faction2 = '.$faction2->getId().')
    			OR
				(f.faction1 = '.$faction2->getId().' AND f.faction2 = '.$faction1->getId().')
    			')
            ->getOneOrNullResult();

        return $state;

    }


    public function findState(Faction $faction1, Faction $faction2)
    {

        $state = $this->getEntityManager()
            ->createQuery('SELECT f FROM MaxcraftDefaultBundle:FactionRole f WHERE
    			(f.faction1 = '.$faction1->getId().' AND f.faction2 = '.$faction2->getId().')
    			OR
				(f.faction1 = '.$faction2->getId().' AND f.faction2 = '.$faction1->getId().')
    			')
            ->getOneOrNullResult();

        if($state)
        {
            return $state->getState();
        }
        else
        {
            return 'NEUTRE';
        }

    }
}
